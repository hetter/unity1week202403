// <auto-generated />
#pragma warning disable CS0105
/*Auto Create, Don't Edit !!!*/

using UnityEngine;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System.IO;
using System;
using DummyEgg.MasterDataWorker.Tables;

namespace DummyEgg.MasterDataWorker
{
   public sealed class MemoryDatabase : MemoryDatabaseBase
   {
        public MstExp_MMItemTable MstExp_MMItemTable { get; private set; }
        public MstJobBaseData_MMItemTable MstJobBaseData_MMItemTable { get; private set; }
        public MstJobDesc_MMItemTable MstJobDesc_MMItemTable { get; private set; }
        public MstJobProgress_MMItemTable MstJobProgress_MMItemTable { get; private set; }
        public mst_test_data_MMItemTable mst_test_data_MMItemTable { get; private set; }

        public MemoryDatabase(
            MstExp_MMItemTable MstExp_MMItemTable,
            MstJobBaseData_MMItemTable MstJobBaseData_MMItemTable,
            MstJobDesc_MMItemTable MstJobDesc_MMItemTable,
            MstJobProgress_MMItemTable MstJobProgress_MMItemTable,
            mst_test_data_MMItemTable mst_test_data_MMItemTable
        )
        {
            this.MstExp_MMItemTable = MstExp_MMItemTable;
            this.MstJobBaseData_MMItemTable = MstJobBaseData_MMItemTable;
            this.MstJobDesc_MMItemTable = MstJobDesc_MMItemTable;
            this.MstJobProgress_MMItemTable = MstJobProgress_MMItemTable;
            this.mst_test_data_MMItemTable = mst_test_data_MMItemTable;
        }

        public MemoryDatabase(byte[] databaseBinary, bool internString = true, MessagePack.IFormatterResolver formatterResolver = null, int maxDegreeOfParallelism = 1)
            : base(databaseBinary, internString, formatterResolver, maxDegreeOfParallelism)
        {
        }

        protected override void Init(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            if(maxDegreeOfParallelism == 1)
            {
                InitSequential(header, databaseBinary, options, maxDegreeOfParallelism);
            }
            else
            {
                InitParallel(header, databaseBinary, options, maxDegreeOfParallelism);
            }
        }

        void InitSequential(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            this.MstExp_MMItemTable = ExtractTableData<MstExp_MMItem, MstExp_MMItemTable>(header, databaseBinary, options, xs => new MstExp_MMItemTable(xs));
            this.MstJobBaseData_MMItemTable = ExtractTableData<MstJobBaseData_MMItem, MstJobBaseData_MMItemTable>(header, databaseBinary, options, xs => new MstJobBaseData_MMItemTable(xs));
            this.MstJobDesc_MMItemTable = ExtractTableData<MstJobDesc_MMItem, MstJobDesc_MMItemTable>(header, databaseBinary, options, xs => new MstJobDesc_MMItemTable(xs));
            this.MstJobProgress_MMItemTable = ExtractTableData<MstJobProgress_MMItem, MstJobProgress_MMItemTable>(header, databaseBinary, options, xs => new MstJobProgress_MMItemTable(xs));
            this.mst_test_data_MMItemTable = ExtractTableData<mst_test_data_MMItem, mst_test_data_MMItemTable>(header, databaseBinary, options, xs => new mst_test_data_MMItemTable(xs));
        }

        void InitParallel(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            var extracts = new Action[]
            {
                () => this.MstExp_MMItemTable = ExtractTableData<MstExp_MMItem, MstExp_MMItemTable>(header, databaseBinary, options, xs => new MstExp_MMItemTable(xs)),
                () => this.MstJobBaseData_MMItemTable = ExtractTableData<MstJobBaseData_MMItem, MstJobBaseData_MMItemTable>(header, databaseBinary, options, xs => new MstJobBaseData_MMItemTable(xs)),
                () => this.MstJobDesc_MMItemTable = ExtractTableData<MstJobDesc_MMItem, MstJobDesc_MMItemTable>(header, databaseBinary, options, xs => new MstJobDesc_MMItemTable(xs)),
                () => this.MstJobProgress_MMItemTable = ExtractTableData<MstJobProgress_MMItem, MstJobProgress_MMItemTable>(header, databaseBinary, options, xs => new MstJobProgress_MMItemTable(xs)),
                () => this.mst_test_data_MMItemTable = ExtractTableData<mst_test_data_MMItem, mst_test_data_MMItemTable>(header, databaseBinary, options, xs => new mst_test_data_MMItemTable(xs)),
            };
            
            System.Threading.Tasks.Parallel.Invoke(new System.Threading.Tasks.ParallelOptions
            {
                MaxDegreeOfParallelism = maxDegreeOfParallelism
            }, extracts);
        }

        public ImmutableBuilder ToImmutableBuilder()
        {
            return new ImmutableBuilder(this);
        }

        public DatabaseBuilder ToDatabaseBuilder()
        {
            var builder = new DatabaseBuilder();
            builder.Append(this.MstExp_MMItemTable.GetRawDataUnsafe());
            builder.Append(this.MstJobBaseData_MMItemTable.GetRawDataUnsafe());
            builder.Append(this.MstJobDesc_MMItemTable.GetRawDataUnsafe());
            builder.Append(this.MstJobProgress_MMItemTable.GetRawDataUnsafe());
            builder.Append(this.mst_test_data_MMItemTable.GetRawDataUnsafe());
            return builder;
        }

        public DatabaseBuilder ToDatabaseBuilder(MessagePack.IFormatterResolver resolver)
        {
            var builder = new DatabaseBuilder(resolver);
            builder.Append(this.MstExp_MMItemTable.GetRawDataUnsafe());
            builder.Append(this.MstJobBaseData_MMItemTable.GetRawDataUnsafe());
            builder.Append(this.MstJobDesc_MMItemTable.GetRawDataUnsafe());
            builder.Append(this.MstJobProgress_MMItemTable.GetRawDataUnsafe());
            builder.Append(this.mst_test_data_MMItemTable.GetRawDataUnsafe());
            return builder;
        }

#if !DISABLE_MASTERMEMORY_VALIDATOR

        public ValidateResult Validate()
        {
            var result = new ValidateResult();
            var database = new ValidationDatabase(new object[]
            {
                MstExp_MMItemTable,
                MstJobBaseData_MMItemTable,
                MstJobDesc_MMItemTable,
                MstJobProgress_MMItemTable,
                mst_test_data_MMItemTable,
            });

            ((ITableUniqueValidate)MstExp_MMItemTable).ValidateUnique(result);
            ValidateTable(MstExp_MMItemTable.All, database, "lv", MstExp_MMItemTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)MstJobBaseData_MMItemTable).ValidateUnique(result);
            ValidateTable(MstJobBaseData_MMItemTable.All, database, "job_id", MstJobBaseData_MMItemTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)MstJobDesc_MMItemTable).ValidateUnique(result);
            ValidateTable(MstJobDesc_MMItemTable.All, database, "job_id", MstJobDesc_MMItemTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)MstJobProgress_MMItemTable).ValidateUnique(result);
            ValidateTable(MstJobProgress_MMItemTable.All, database, "job_id", MstJobProgress_MMItemTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)mst_test_data_MMItemTable).ValidateUnique(result);
            ValidateTable(mst_test_data_MMItemTable.All, database, "test_id", mst_test_data_MMItemTable.PrimaryKeySelector, result);

            return result;
        }

#endif

        static MasterMemory.Meta.MetaDatabase metaTable;

        public static object GetTable(MemoryDatabase db, string tableName)
        {
            switch (tableName)
            {
                case "MstExp_MMItem":
                    return db.MstExp_MMItemTable;
                case "MstJobBaseData_MMItem":
                    return db.MstJobBaseData_MMItemTable;
                case "MstJobDesc_MMItem":
                    return db.MstJobDesc_MMItemTable;
                case "MstJobProgress_MMItem":
                    return db.MstJobProgress_MMItemTable;
                case "mst_test_data_MMItem":
                    return db.mst_test_data_MMItemTable;
                
                default:
                    return null;
            }
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaDatabase GetMetaDatabase()
        {
            if (metaTable != null) return metaTable;

            var dict = new Dictionary<string, MasterMemory.Meta.MetaTable>();
            dict.Add("MstExp_MMItem", DummyEgg.MasterDataWorker.Tables.MstExp_MMItemTable.CreateMetaTable());
            dict.Add("MstJobBaseData_MMItem", DummyEgg.MasterDataWorker.Tables.MstJobBaseData_MMItemTable.CreateMetaTable());
            dict.Add("MstJobDesc_MMItem", DummyEgg.MasterDataWorker.Tables.MstJobDesc_MMItemTable.CreateMetaTable());
            dict.Add("MstJobProgress_MMItem", DummyEgg.MasterDataWorker.Tables.MstJobProgress_MMItemTable.CreateMetaTable());
            dict.Add("mst_test_data_MMItem", DummyEgg.MasterDataWorker.Tables.mst_test_data_MMItemTable.CreateMetaTable());

            metaTable = new MasterMemory.Meta.MetaDatabase(dict);
            return metaTable;
        }

#endif
    }
}